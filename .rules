## basics

- this is a deno app
- after editing any graphql documents, run `deno task codegen` to get the
  updated types after it's updated,
  `const result = await client.request(query, { teamId });` should work and be
  typed (and not require explicit types)
- graphql/schema.graphql has the graphql schema document for linear's api
- for diagnostics, use `deno check` and `deno lint` (and not tsc directly)
- when coloring or styling terminal text, use deno's support for css style
  formatting, e.g. console.log("%cHello World", "color: red"); or
  console.log("%cHello World", "text-decoration: underline");

## changelog entries

do not update the CHANGELOG.md manually. if asked to add a changelog entry use
the changelog cli

    changelog add --type <TYPE> <DESCRIPTION>

description should be lowercase. types is one of
added|changed|deprecated|removed|fixed|security

## tests

tests on commands should mirror the directory structure of the src, e.g.

    src/commands/issue/issue-view.ts
    test/commands/issue/issue-view.test.ts
